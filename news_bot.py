import os
import asyncio
import feedparser
from aiogram import Bot, Dispatcher, types
from aiogram.client.default import DefaultBotProperties
from dotenv import load_dotenv

# ====================== –ó–∞–≥—Ä—É–∑–∫–∞ env ======================
load_dotenv()
BOT_TOKEN = os.getenv("BOT_TOKEN")
CHANNEL_ID = int(os.getenv("CHANNEL_ID"))

bot = Bot(token=BOT_TOKEN, default=DefaultBotProperties(parse_mode="HTML"))
dp = Dispatcher()

# –ü—Ä–æ—Å—Ç–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –≤ –ø–∞–º—è—Ç–∏ (–ø–æ–∑–∂–µ –∑–∞–º–µ–Ω–∏–º –Ω–∞ –ë–î)
rss_feeds = []
user_states = {}
seen_links = set()
news_queue = []

SEND_INTERVAL = 60

# ====================== –ò–º–ø–æ—Ä—Ç –∫–æ–º–∞–Ω–¥ ======================
from commands.add_rss import add_rss_handler
from commands.list_rss import list_rss_handler
from commands.edit_rss import edit_rss_handler, edit_rss_callback_handler
from commands.remove_rss import remove_rss_handler


# ====================== Callback handler –¥–ª—è –∫–Ω–æ–ø–æ–∫ ======================
@dp.callback_query()
async def all_callbacks(callback: types.CallbackQuery):
    await edit_rss_callback_handler(callback, rss_feeds, user_states, bot)


# ====================== –§–æ–Ω–æ–≤—ã–µ –∑–∞–¥–∞—á–∏ ======================
async def fetch_feeds():
    while True:
        for feed in rss_feeds:
            try:
                parsed = feedparser.parse(feed["url"])
                for entry in parsed.entries:
                    if entry.link not in seen_links:
                        seen_links.add(entry.link)
                        news_queue.append(entry)
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ RSS {feed['url']}: {e}")
        await asyncio.sleep(60)


async def post_news():
    while True:
        if news_queue:
            entry = news_queue.pop(0)
            text = f"<b>{entry.title}</b>\n{entry.link}"
            try:
                await bot.send_message(CHANNEL_ID, text)
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: {e}")
        await asyncio.sleep(SEND_INTERVAL)


# ====================== –ü—Ä–æ—Å—Ç–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ—Å—Ç–æ—è–Ω–∏–π ======================
async def handle_user_state(message: types.Message):
    chat_id = message.chat.id
    text = message.text.strip()

    if chat_id not in user_states:
        return False

    state = user_states[chat_id]

    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–µ–ª –∫–æ–º–∞–Ω–¥—É - –ø—Ä–µ—Ä—ã–≤–∞–µ–º –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤
    if text.startswith("/"):
        del user_states[chat_id]
        return False

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è RSS
    if state.get("mode") == "add":
        await add_rss_handler(message, rss_feeds, user_states)
        return True

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è RSS
    elif state.get("mode") == "edit":
        await edit_rss_handler(message, rss_feeds, user_states)
        return True

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è RSS
    elif state.get("mode") == "remove":
        await remove_rss_handler(message, rss_feeds, user_states)
        return True

    return False


# ====================== –ú–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ç–æ—Ä –∫–æ–º–∞–Ω–¥ ======================
async def route_message(message: types.Message):
    chat_id = message.chat.id
    text = message.text.strip()

    # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    if await handle_user_state(message):
        return

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥
    if text == "/add_rss":
        user_states[chat_id] = {"mode": "add", "step": 0}
        await message.answer("üîó –í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ RSS:")

    elif text == "/list_rss":
        await list_rss_handler(message, rss_feeds)

    elif text == "/edit_rss":
        user_states[chat_id] = {"mode": "edit", "step": 0}
        await edit_rss_handler(message, rss_feeds, user_states)

    elif text == "/remove_rss":
        user_states[chat_id] = {"mode": "remove", "step": 0}
        await remove_rss_handler(message, rss_feeds, user_states)

    else:
        await message.answer(
            "‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞.\n–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n/add_rss\n/list_rss\n/edit_rss\n/remove_rss"
        )


# ====================== –•—ç–Ω–¥–ª–µ—Ä –¥–ª—è –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π ======================
@dp.message()
async def all_messages(message: types.Message):
    await route_message(message)


# ====================== –°—Ç–∞—Ä—Ç ======================
async def main():
    print("üöÄ –ë–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")
    asyncio.create_task(fetch_feeds())
    asyncio.create_task(post_news())
    await dp.start_polling(bot)


if __name__ == "__main__":
    asyncio.run(main())