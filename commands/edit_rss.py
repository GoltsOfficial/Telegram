from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram import Bot


async def edit_rss_handler(message: Message, rss_feeds, user_states):
    chat_id = message.chat.id
    state = user_states[chat_id]

    if state["step"] == 0:
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ RSS
        if not rss_feeds:
            await message.answer("üì≠ –°–ø–∏—Å–æ–∫ RSS –ø—É—Å—Ç.")
            del user_states[chat_id]
            return

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –Ω—É–º–µ—Ä–∞—Ü–∏–µ–π —Å 1 –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞
        msg = "üìÉ –í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–º–µ—Ä RSS –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:\n\n" + \
              "\n".join(f"{i + 1}. {rss['name']} ({rss['url']})" for i, rss in enumerate(rss_feeds))

        state["step"] = 1
        state["rss_list"] = rss_feeds.copy()
        await message.answer(msg)

    elif state["step"] == 1:
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤—ã–±–æ—Ä –Ω–æ–º–µ—Ä–∞
        try:
            index = int(message.text) - 1  # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ –∏–Ω–¥–µ–∫—Å (0-based)
            if 0 <= index < len(rss_feeds):
                state["step"] = 2
                state["selected_index"] = index
                state["selected_rss"] = rss_feeds[index]

                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏ –≤—ã–±–æ—Ä–∞ –¥–µ–π—Å—Ç–≤–∏—è
                keyboard = InlineKeyboardMarkup(row_width=2)
                keyboard.add(
                    InlineKeyboardButton("‚úèÔ∏è –ù–∞–∑–≤–∞–Ω–∏–µ", callback_data="edit_name"),
                    InlineKeyboardButton("üîó –°—Å—ã–ª–∫–∞", callback_data="edit_url"),
                    InlineKeyboardButton("‚è∞ –ò–Ω—Ç–µ—Ä–≤–∞–ª", callback_data="edit_interval"),
                    InlineKeyboardButton("‚ùå –£–¥–∞–ª–∏—Ç—å", callback_data="delete_rss")
                )

                rss = rss_feeds[index]
                await message.answer(
                    f"üìã –í—ã–±—Ä–∞–Ω RSS: {rss['name']}\n"
                    f"üîó –°—Å—ã–ª–∫–∞: {rss['url']}\n"
                    f"‚è∞ –ò–Ω—Ç–µ—Ä–≤–∞–ª: {rss.get('interval', '–ù–µ —É–∫–∞–∑–∞–Ω')} –º–∏–Ω.\n\n"
                    f"–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å?",
                    reply_markup=keyboard
                )
            else:
                await message.answer(f"‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ {len(rss_feeds)}:")
        except ValueError:
            await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ:")


async def edit_rss_callback_handler(callback_query: CallbackQuery, rss_feeds, user_states, bot: Bot):
    chat_id = callback_query.from_user.id
    data = callback_query.data

    if chat_id not in user_states:
        await callback_query.answer("‚ùå –°–µ—Å—Å–∏—è –∏—Å—Ç–µ–∫–ª–∞.")
        return

    state = user_states[chat_id]

    if data == "edit_name":
        state["step"] = 3
        state["editing_field"] = "name"
        await callback_query.message.answer("‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ:")

    elif data == "edit_url":
        state["step"] = 3
        state["editing_field"] = "url"
        await callback_query.message.answer("üîó –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é —Å—Å—ã–ª–∫—É:")

    elif data == "edit_interval":
        state["step"] = 3
        state["editing_field"] = "interval"
        await callback_query.message.answer("‚è∞ –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª (–≤ –º–∏–Ω—É—Ç–∞—Ö):")

    elif data == "delete_rss":
        index = state["selected_index"]
        if 0 <= index < len(rss_feeds):
            removed_rss = rss_feeds.pop(index)
            await callback_query.message.answer(f"‚úÖ RSS '{removed_rss['name']}' —É–¥–∞–ª–µ–Ω!")
            del user_states[chat_id]

    await callback_query.answer()


# –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π —Ö–µ–Ω–¥–ª–µ—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–≤–æ–¥–∞ –Ω–æ–≤—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π
async def handle_edit_input(message: Message, user_states, rss_feeds):
    chat_id = message.chat.id

    if chat_id not in user_states:
        return False

    state = user_states[chat_id]

    if state.get("step") == 3:  # –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª—è
        field = state.get("editing_field")
        index = state.get("selected_index")
        text = message.text.strip()

        if field and index is not None and 0 <= index < len(rss_feeds):
            if field == "interval":
                try:
                    value = int(text)
                    if value <= 0:
                        await message.answer("‚ùå –ò–Ω—Ç–µ—Ä–≤–∞–ª –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º.")
                        return True
                except ValueError:
                    await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –¥–ª—è –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞.")
                    return True
            else:
                value = text

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
            old_value = rss_feeds[index].get(field, "–ù–µ —É–∫–∞–∑–∞–Ω")
            rss_feeds[index][field] = value

            await message.answer(f"‚úÖ {field} –∏–∑–º–µ–Ω–µ–Ω —Å '{old_value}' –Ω–∞ '{value}'")
            del user_states[chat_id]
            return True

    return False